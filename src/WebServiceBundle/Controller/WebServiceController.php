<?php

namespace WebServiceBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Serializer;
use Symfony\Component\Validator\Constraints\DateTime;
use AppBundle\Entity\User;
use WebServiceBundle\Entity\Reclamation;


class WebServiceController extends Controller
{
    public function indexAction($name)
    {
        return $this->render('', array('name' => $name));
    }


    public function ProductsAction($id){
		$em = $this->getDoctrine()->getManager();
       // $reclamation= $this->getDoctrine()->getManager()->getRepository('WebServiceBundle:Reclamation')->findAll();
	   // $reclamation = $em->getRepository(Reclamation::class)->findBy(array('user'=>$request->get('id'));
	    $reclamation = $em->getRepository('WebServiceBundle:Reclamation')->findByuser($id);
	   
       // $normalizer = new ObjectNormalizer() ;
       // $normalizer->setCircularReferenceLimit(3);



          $serializer = new Serializer([new ObjectNormalizer()]);
       

        $formatted = $serializer->normalize($reclamation);


        return new JsonResponse($formatted);
    }

 private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
//******************************************* jdida****************************************

  public function addnadaAction(\Symfony\Component\HttpFoundation\Request $request)
    {
        $em=$this->getDoctrine()->getManager();
		$reclamation = new Reclamation();

      $user = $em->getRepository('AppBundle:User')->find($request->get('id'));


        $c=$em->getRepository('AppBundle:User')->findBy(array('nom'=>$request->get('nom')));
		$reclamation->setMail($user->getEmail());

		
		
		$reclamation->setPhone($request->get('phone'));
		$reclamation->setShortDescr($request->get('short_descr'));
		
           
            $reclamation->setNatureReclamation($request->get('short_descr'));
            $reclamation->setDescription($request->get('description'));
            $reclamation->setDate(new \DateTime('now'));
            $reclamation->setEtat("En attente");
            $reclamation->setUser($user);
            $reclamation->setTarget($c[0]);
            //$reclamation->setTarget_id($test2);
           $reclamation->setVisible(0);
		  // $reclamation->setRefImg($request->get('ref_img'));
		   $img=$request->get('ref_img');

        $fileName = $this->generateUniqueFileName() . '.'.substr($img, strlen($img)-3, strlen($img));;
        $reclamation->setRefImg($fileName);
$source='file:///C:/Users/HELLBOH/.cn1/';
$dest='file:///C:/wamp64/www/SMF1/SMF1/web/uploads/ImgReclamation/';
        var_dump($source);
        var_dump($dest);
		copy($source.$img, $dest.$fileName);
		
		
		

        $em->persist($reclamation);
        $em->flush();
        $normalizer = new ObjectNormalizer() ;
        $normalizer->setCircularReferenceLimit(3);

      

        $normalizers = array($normalizer);
        $serializer = new Serializer($normalizers);

        $formatted = $serializer->normalize($reclamation);


        return new JsonResponse($formatted);


    }








//********************************************************************************
    public function addAction($short_descr,$phone,$nom_prest,$description,$ref_img,$user_id)
    {
        $em=$this->getDoctrine()->getManager();
        $user = $em->getRepository('WebServiceBundle:User')->find($user_id);


        $c=$em->getRepository('WebServiceBundle:User')->findBy(array('nom'=>$nom_prest));
      

		$reclamation = new Reclamation();
		$reclamation->setMail($this->getDoctrine()->getManager()->getRepository('WebServiceBundle:User')->find($user_id)->getEmail());
		$reclamation->setPhone($phone);
		$reclamation->setShortDescr($short_descr);
		
           
            $reclamation->setNatureReclamation($short_descr);
            $reclamation->setDescription($description);
            $reclamation->setDate(new \DateTime('now'));
            $reclamation->setEtat("En attente");
            $reclamation->setUser($user);
            $reclamation->setTarget($c[0]);
           // $reclamation->setTarget_id($test2);
           $reclamation->setVisible(0);
 


     


        $fileName = $this->generateUniqueFileName() . '.'.substr($ref_img, strlen($ref_img)-3, strlen($ref_img));;

        $reclamation->setRefImg($fileName);


     





        copy('C:\\Users\\admin\\.cn1\\'.$ref_img, 'C:\\wamp64\\www\SMF1\\SMF1\\web\\uploads\\ImgReclamation\\'.$fileName);


        //$em=$this->getDoctrine()->getManager();
        $em->persist($reclamation);
        $em->flush();
        $normalizer = new ObjectNormalizer() ;
        $normalizer->setCircularReferenceLimit(3);

      

        $normalizers = array($normalizer);
        $serializer = new Serializer($normalizers);

        $formatted = $serializer->normalize($reclamation);


        return new JsonResponse($formatted);


    }

   



//************************************************Recherches*********************************************************


    public function ReclamsRecherchesAction($tag){
        $prods= $this->getDoctrine()->getManager()->getRepository('WebServiceBundle:Reclamation')->findByKey($tag);
        $normalizer = new ObjectNormalizer() ;
        $normalizer->setCircularReferenceLimit(3);

        

        $normalizers = array($normalizer);
        $serializer = new Serializer($normalizers);

        $formatted = $serializer->normalize($prods);


        return new JsonResponse($formatted);
    }




































}
