<?php

namespace WebServiceBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Serializer;
use Symfony\Component\Validator\Constraints\DateTime;
use AppBundle\Entity\User;


class UserController extends Controller
{
    public function indexAction($name)
    {
        return $this->render('', array('name' => $name));
    }

    public function allAction()
    {
        $user = $this->getDoctrine()->getManager()->getRepository('AppBundle:User')->findAll();
        $normalizer = new ObjectNormalizer() ;
        $normalizer->setCircularReferenceLimit(3);



        $normalizers = array($normalizer);
        $serializer = new Serializer($normalizers);

        $formatted = $serializer->normalize($user);


        return new JsonResponse($formatted);
    }
	
	public function all2Action($id)
    {
        $user = $this->getDoctrine()->getManager()->getRepository('AppBundle:User')->find($id);
        $normalizer = new ObjectNormalizer() ;
        $normalizer->setCircularReferenceLimit(3);



        $normalizers = array($normalizer);
        $serializer = new Serializer($normalizers);

        $formatted = $serializer->normalize($user);


        return new JsonResponse($formatted);
    }




    public function updateProfileAction(Request $request)
    {
        $em=$this->getDoctrine()->getManager();
        $user = $this->getDoctrine()->getManager()->getRepository('AppBundle:User')->find(array('id'=> $request->get('id')));

        $user->setNom($request->get('nom'));

        $user->setUsername($request->get("username"));
        $user->setEmail($request->get('email'));

        $user->setTel($request->get('tel'));
        $user->setAdresse($request->get("adresse"));
		
		$img=$request->get('urlLogoPro');

        $fileName = $this->generateUniqueFileName() . '.'.substr($img, strlen($img)-3, strlen($img));;
       
$source='file:///C:/Users/HELLBOH/.cn1/';
$dest='file:///C:/wamp64/www/SMF1/SMF1/web/uploads/Profil/';
        var_dump($source);
        var_dump($dest);
		copy($source.$img, $dest.$fileName);
		$user->setUrllogopro($fileName);
		
		
		
		
		
		
		
        /* $user->setEnabled($request->get("enabled"));*/
        /* $user->setVille($request->get("ville"));
        $user->setPays($request->get("pays")); */

        $em->persist($user);
        $em->flush();
        $encoders = array( new JsonEncoder());
        $normalizer = new ObjectNormalizer();
        $normalizer->setCircularReferenceLimit(2);
        $normalizer->setCircularReferenceHandler(function ($object) { return $object->getId(); });
        $normalizers = array($normalizer);
        $serializer = new \Symfony\Component\Serializer\Serializer($normalizers, $encoders);
        $jsonContent = $serializer->serialize($user, 'json');
        $json=json_decode($jsonContent);
        return new JsonResponse($json);


    }
	
	
	
	
 private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    public function addAction(Request $request)
    {
        $em=$this->getDoctrine()->getManager();
        $user=new User();

        $user->setNom($request->get('nom'));

        $user->setUsername($request->get("username"));
        $user->setUsernameCanonical($request->get("username_canonical"));
        $user->setEmail($request->get('email'));
        $user->setEmailCanonical($request->get("email_canonical"));
        $user->setTel($request->get('tel'));
        $user->setAdresse($request->get("adresse"));
		
		
		
		
		
		
				   $img=$request->get('urlLogoPro');

        $fileName = $this->generateUniqueFileName() . '.'.substr($img, strlen($img)-3, strlen($img));;
       
$source='file:///C:/Users/HELLBOH/.cn1/';
$dest='file:///C:/wamp64/www/SMF1/SMF1/web/uploads/Profil/';
        var_dump($source);
        var_dump($dest);
		copy($source.$img, $dest.$fileName);
		$user->setUrllogopro($fileName);

        $user->setRoles(array("ROLE_MEMBER"));
        $user->setEnabled($request->get("enabled"));

        $options = [
            'cost' => 12,
        ];
        $p= password_hash($request->get("password"), PASSWORD_BCRYPT, $options);
        $user->setPassword($p);

        $em->persist($user);
        $em->flush();
        $encoders = array( new JsonEncoder());
        $normalizer = new ObjectNormalizer();
        $normalizer->setCircularReferenceLimit(2);
        $normalizer->setCircularReferenceHandler(function ($object) { return $object->getId(); });
        $normalizers = array($normalizer);
        $serializer = new \Symfony\Component\Serializer\Serializer($normalizers, $encoders);
        $jsonContent = $serializer->serialize($user, 'json');
        $json=json_decode($jsonContent);
        return new JsonResponse($json);



    }




    public function authentificationAction(Request $request)
    {
        $valid = false;
        $em = $this->getDoctrine()->getManager();
        $json="";

        $user = $em->getRepository('AppBundle:User')->findOneBy(array('username'=> $request->get('login')));



        if (password_verify($request->get('password'),$user->getPassword() )){

            //  var_dump($hash);
			
			
			/*$uul=$request->get('id');
			$uulf=$uul.''.".jpg";
            $user->setUrllogopro($uulf);
            $em->persist($user);
            $em->flush();*/
            $valid = true;
            $encoders = array(new JsonEncoder());
            $normalizer = new ObjectNormalizer();

            $normalizer->setCircularReferenceLimit(2);



            $normalizer->setCircularReferenceHandler(function ($object) {
                return $object->getId();
            });
            $normalizers = array($normalizer);
            $serializer = new \Symfony\Component\Serializer\Serializer($normalizers, $encoders);


            $jsonContent = $serializer->serialize($user, 'json');
            $json = json_decode($jsonContent);
            //   $json= JsonResponse($json);
        }
        else{
            $json="";
        }


        return new JsonResponse($json);
        /*var_dump($user);
        return new Response("56s4df5s");*/

    }
































}
